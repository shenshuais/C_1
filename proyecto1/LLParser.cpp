#include <string>
#include <map>
#include <vector>
#include <stack>

enum NoTerm {
	declaraciones,
	declaraciones_,
	declaracion__,
	declaracion___,
	declaracion,
	declaracion_,
	lista_args,
	decl_locales,
	bloque_sentencias,
	bloque_o_sentencia,
	body_struct,
	lista_var,
	lista_var_,
	decl_var,
	tipo,
	args,
	args_,
	arg,
	decl_local,
	sentencias,
	sentencias_,
	sentencia,
	sent_while,
	sent_asig,
	sent_break,
	sent_scan,
	sent_do,
	sent_if_,
	sent_if,
	sent_return,
	sent_print,
	sent_return_,
	sent_print_,
	parte_izq,
	parte_izq_,
	exp,
	exp_,
	exp_and,
	exp_and_,
	exp_rel,
	exp_rel_,
	exp_rel1,
	exp_rel1_,
	exp_mas,
	exp_mas_,
	exp_mul,
	exp_mul_,
	exp_not,
	exp_par,
	exp_par_,
	lista_params,
	params,
	params_,
	param,
	programa,
};


enum Token {
	ENDF= 0,
	ID,
	NUMERO,
	CADENA,
	CARACTER,
	PYC,
	COMA,
	PUNTO,
	LKEY,
	RKEY,
	IF,
	ELSE,
	WHILE,
	DO,
	RETURN,
	BREAK,
	INT,
	FLOAT,
	CHAR,
	DOUBLE,
	VOID,
	STRUCT,
	PRINT,
	SCAN,
	ASIG,
	OR,
	AND,
	EQUAL,
	DIFF,
	LT,
	GT,
	LTE,
	GTE,
	ADD,
	SUB,
	MUL,
	DIV,
	MOD,
	NOT,
	LPAR,
	RPAR,
};


enum LLSymType {
	ll_terminal,
	ll_noterminal,
	ll_action
};

struct LLSymbol
{
	LLSymType type;
	std::string name;
	std::string object;
	int idx;
	LLSymbol(std::string name, std::string object, LLSymType type, int idx ){
		this->name = name;
		this->object = object;
		this->type = type;
		this->idx = idx;
	}
	LLSymbol()=default;
};

typedef std::vector<int> Body;
struct LLProduction{
	int head;
	std::vector<int> body;
	LLProduction(int head, Body body){
		this->head = head;
		this->body = body;
	}
};

struct LLGrammar{
	int start=25964;
	std::map<int, LLSymbol> ll_symbols = {
		{0,{"ID", "", ll_terminal, ID}},
		{1,{"NUMERO", "", ll_terminal, NUMERO}},
		{2,{"CADENA", "", ll_terminal, CADENA}},
		{3,{"CARACTER", "", ll_terminal, CARACTER}},
		{4,{"PYC", "", ll_terminal, PYC}},
		{5,{"COMA", "", ll_terminal, COMA}},
		{6,{"PUNTO", "", ll_terminal, PUNTO}},
		{7,{"LKEY", "", ll_terminal, LKEY}},
		{8,{"RKEY", "", ll_terminal, RKEY}},
		{9,{"IF", "", ll_terminal, IF}},
		{10,{"ELSE", "", ll_terminal, ELSE}},
		{11,{"WHILE", "", ll_terminal, WHILE}},
		{12,{"DO", "", ll_terminal, DO}},
		{13,{"RETURN", "", ll_terminal, RETURN}},
		{14,{"BREAK", "", ll_terminal, BREAK}},
		{15,{"INT", "", ll_terminal, INT}},
		{16,{"FLOAT", "", ll_terminal, FLOAT}},
		{17,{"CHAR", "", ll_terminal, CHAR}},
		{18,{"DOUBLE", "", ll_terminal, DOUBLE}},
		{19,{"VOID", "", ll_terminal, VOID}},
		{20,{"STRUCT", "", ll_terminal, STRUCT}},
		{21,{"PRINT", "", ll_terminal, PRINT}},
		{22,{"SCAN", "", ll_terminal, SCAN}},
		{23,{"ASIG", "", ll_terminal, ASIG}},
		{24,{"OR", "", ll_terminal, OR}},
		{25,{"AND", "", ll_terminal, AND}},
		{26,{"EQUAL", "", ll_terminal, EQUAL}},
		{27,{"DIFF", "", ll_terminal, DIFF}},
		{28,{"LT", "", ll_terminal, LT}},
		{29,{"GT", "", ll_terminal, GT}},
		{30,{"LTE", "", ll_terminal, LTE}},
		{31,{"GTE", "", ll_terminal, GTE}},
		{32,{"ADD", "", ll_terminal, ADD}},
		{33,{"SUB", "", ll_terminal, SUB}},
		{34,{"MUL", "", ll_terminal, MUL}},
		{35,{"DIV", "", ll_terminal, DIV}},
		{36,{"MOD", "", ll_terminal, MOD}},
		{37,{"NOT", "", ll_terminal, NOT}},
		{38,{"LPAR", "", ll_terminal, LPAR}},
		{39,{"RPAR", "", ll_terminal, RPAR}},
		{40,{"$", "", ll_terminal, ENDF}},
		{41,{"declaraciones", "", ll_noterminal, declaraciones}},
		{42,{"declaraciones_", "", ll_noterminal, declaraciones_}},
		{43,{"declaracion__", "", ll_noterminal, declaracion__}},
		{44,{"declaracion___", "", ll_noterminal, declaracion___}},
		{45,{"declaracion", "", ll_noterminal, declaracion}},
		{46,{"declaracion_", "", ll_noterminal, declaracion_}},
		{47,{"lista_args", "", ll_noterminal, lista_args}},
		{48,{"decl_locales", "", ll_noterminal, decl_locales}},
		{49,{"bloque_sentencias", "", ll_noterminal, bloque_sentencias}},
		{50,{"bloque_o_sentencia", "", ll_noterminal, bloque_o_sentencia}},
		{51,{"body_struct", "", ll_noterminal, body_struct}},
		{52,{"lista_var", "", ll_noterminal, lista_var}},
		{53,{"lista_var_", "", ll_noterminal, lista_var_}},
		{54,{"decl_var", "", ll_noterminal, decl_var}},
		{55,{"tipo", "", ll_noterminal, tipo}},
		{56,{"args", "", ll_noterminal, args}},
		{57,{"args_", "", ll_noterminal, args_}},
		{58,{"arg", "", ll_noterminal, arg}},
		{59,{"decl_local", "", ll_noterminal, decl_local}},
		{60,{"sentencias", "", ll_noterminal, sentencias}},
		{61,{"sentencias_", "", ll_noterminal, sentencias_}},
		{62,{"sentencia", "", ll_noterminal, sentencia}},
		{63,{"sent_while", "", ll_noterminal, sent_while}},
		{64,{"sent_asig", "", ll_noterminal, sent_asig}},
		{65,{"sent_break", "", ll_noterminal, sent_break}},
		{66,{"sent_scan", "", ll_noterminal, sent_scan}},
		{67,{"sent_do", "", ll_noterminal, sent_do}},
		{68,{"sent_if_", "", ll_noterminal, sent_if_}},
		{69,{"sent_if", "", ll_noterminal, sent_if}},
		{70,{"sent_return", "", ll_noterminal, sent_return}},
		{71,{"sent_print", "", ll_noterminal, sent_print}},
		{72,{"sent_return_", "", ll_noterminal, sent_return_}},
		{73,{"sent_print_", "", ll_noterminal, sent_print_}},
		{74,{"parte_izq", "", ll_noterminal, parte_izq}},
		{75,{"parte_izq_", "", ll_noterminal, parte_izq_}},
		{76,{"exp", "", ll_noterminal, exp}},
		{77,{"exp_", "", ll_noterminal, exp_}},
		{78,{"exp_and", "", ll_noterminal, exp_and}},
		{79,{"exp_and_", "", ll_noterminal, exp_and_}},
		{80,{"exp_rel", "", ll_noterminal, exp_rel}},
		{81,{"exp_rel_", "", ll_noterminal, exp_rel_}},
		{82,{"exp_rel1", "", ll_noterminal, exp_rel1}},
		{83,{"exp_rel1_", "", ll_noterminal, exp_rel1_}},
		{84,{"exp_mas", "", ll_noterminal, exp_mas}},
		{85,{"exp_mas_", "", ll_noterminal, exp_mas_}},
		{86,{"exp_mul", "", ll_noterminal, exp_mul}},
		{87,{"exp_mul_", "", ll_noterminal, exp_mul_}},
		{88,{"exp_not", "", ll_noterminal, exp_not}},
		{89,{"exp_par", "", ll_noterminal, exp_par}},
		{90,{"exp_par_", "", ll_noterminal, exp_par_}},
		{91,{"lista_params", "", ll_noterminal, lista_params}},
		{92,{"params", "", ll_noterminal, params}},
		{93,{"params_", "", ll_noterminal, params_}},
		{94,{"param", "", ll_noterminal, param}},
		{95,{"programa", "", ll_noterminal, programa}},
	};

	std::map<int, LLProduction> prods = {
		{0,{95,{ 41, }}},
		{1,{41,{ 45, 42, }}},
		{2,{42,{ 45, 42, }}},
		{3,{42,{ }}},
		{4,{45,{ 20, 46, }}},
		{5,{45,{ 55, 0, 43, }}},
		{6,{45,{ 19, 0, 38, 47, 39, 7, 48, 49, 8, }}},
		{7,{46,{ 51, 52, 4, }}},
		{8,{46,{ 0, 44, }}},
		{9,{43,{ 53, 4, }}},
		{10,{43,{ 38, 47, 39, 7, 48, 49, 8, }}},
		{11,{44,{ 51, 52, 4, }}},
		{12,{44,{ 0, 38, 47, 39, 7, 48, 49, 8, }}},
		{13,{52,{ 0, 53, }}},
		{14,{53,{ 5, 0, 53, }}},
		{15,{53,{ }}},
		{16,{54,{ 55, 52, 4, }}},
		{17,{55,{ 15, }}},
		{18,{55,{ 16, }}},
		{19,{55,{ 17, }}},
		{20,{55,{ 18, }}},
		{21,{51,{ 7, 48, 8, }}},
		{22,{47,{ 56, }}},
		{23,{47,{ }}},
		{24,{56,{ 58, 57, }}},
		{25,{57,{ 5, 58, 57, }}},
		{26,{57,{ }}},
		{27,{58,{ 55, 0, }}},
		{28,{48,{ 59, 48, }}},
		{29,{48,{ }}},
		{30,{59,{ 54, }}},
		{31,{49,{ 60, }}},
		{32,{49,{ }}},
		{33,{60,{ 62, 61, }}},
		{34,{61,{ 62, 61, }}},
		{35,{61,{ }}},
		{36,{62,{ 69, }}},
		{37,{62,{ 63, }}},
		{38,{62,{ 67, }}},
		{39,{62,{ 64, }}},
		{40,{62,{ 65, }}},
		{41,{62,{ 70, }}},
		{42,{62,{ 71, }}},
		{43,{62,{ 66, }}},
		{44,{69,{ 9, 38, 76, 39, 50, 68, }}},
		{45,{68,{ 10, 50, }}},
		{46,{68,{ }}},
		{47,{63,{ 11, 38, 76, 39, 50, }}},
		{48,{67,{ 12, 50, 11, 38, 76, 39, }}},
		{49,{64,{ 74, 23, 76, 4, }}},
		{50,{74,{ 0, 75, }}},
		{51,{75,{ 6, 0, }}},
		{52,{75,{ }}},
		{53,{71,{ 21, 38, 73, }}},
		{54,{73,{ 76, 39, 4, }}},
		{55,{73,{ 2, 39, 4, }}},
		{56,{66,{ 22, 38, 0, 39, 4, }}},
		{57,{65,{ 14, 4, }}},
		{58,{70,{ 13, 72, }}},
		{59,{72,{ 76, 4, }}},
		{60,{72,{ 4, }}},
		{61,{76,{ 78, 77, }}},
		{62,{77,{ 24, 78, 77, }}},
		{63,{77,{ }}},
		{64,{78,{ 80, 79, }}},
		{65,{79,{ 25, 80, 79, }}},
		{66,{79,{ }}},
		{67,{80,{ 82, 81, }}},
		{68,{81,{ 26, 82, 81, }}},
		{69,{81,{ 27, 82, 81, }}},
		{70,{81,{ }}},
		{71,{82,{ 84, 83, }}},
		{72,{83,{ 28, 84, 83, }}},
		{73,{83,{ 30, 84, 83, }}},
		{74,{83,{ 29, 84, 83, }}},
		{75,{83,{ 31, 84, 83, }}},
		{76,{83,{ }}},
		{77,{84,{ 86, 85, }}},
		{78,{85,{ 32, 86, 85, }}},
		{79,{85,{ 33, 86, 85, }}},
		{80,{85,{ }}},
		{81,{86,{ 88, 87, }}},
		{82,{87,{ 34, 88, 87, }}},
		{83,{87,{ 35, 88, 87, }}},
		{84,{87,{ 36, 88, 87, }}},
		{85,{87,{ }}},
		{86,{88,{ 37, 88, }}},
		{87,{88,{ 89, }}},
		{88,{89,{ 0, 90, }}},
		{89,{89,{ 38, 76, 39, }}},
		{90,{89,{ 1, }}},
		{91,{90,{ 38, 91, 39, }}},
		{92,{90,{ 6, 0, }}},
		{93,{90,{ }}},
		{94,{91,{ 92, }}},
		{95,{91,{ }}},
		{96,{92,{ 94, 93, }}},
		{97,{93,{ 5, 94, 93, }}},
		{98,{93,{ }}},
		{99,{94,{ 76, }}},
	};

};
struct LLTable{
	std::map<NoTerm, std::map<Token, int>> LLtable = {
		{declaraciones, {{INT,1},{FLOAT,1},{CHAR,1},{DOUBLE,1},{VOID,1},{STRUCT,1},}},
		{declaraciones_, {{INT,2},{FLOAT,2},{CHAR,2},{DOUBLE,2},{VOID,2},{STRUCT,2},{ENDF, 3},}},
		{declaracion__, {{PYC,9},{COMA,9},{LPAR,10},}},
		{declaracion___, {{ID,12},{LKEY,11},}},
		{declaracion, {{INT,5},{FLOAT,5},{CHAR,5},{DOUBLE,5},{VOID,6},{STRUCT,4},}},
		{declaracion_, {{ID,8},{LKEY,7},}},
		{lista_args, {{INT,22},{FLOAT,22},{CHAR,22},{DOUBLE,22},{RPAR,23},}},
		{decl_locales, {{ID,29},{RKEY,29},{IF,29},{WHILE,29},{DO,29},{RETURN,29},{BREAK,29},{INT,28},{FLOAT,28},{CHAR,28},{DOUBLE,28},{PRINT,29},{SCAN,29},}},
		{bloque_sentencias, {{ID,31},{RKEY,32},{IF,31},{WHILE,31},{DO,31},{RETURN,31},{BREAK,31},{PRINT,31},{SCAN,31},}},
		{body_struct, {{LKEY,21},}},
		{lista_var, {{ID,13},}},
		{lista_var_, {{PYC,15},{COMA,14},}},
		{decl_var, {{INT,16},{FLOAT,16},{CHAR,16},{DOUBLE,16},}},
		{tipo, {{INT,17},{FLOAT,18},{CHAR,19},{DOUBLE,20},}},
		{args, {{INT,24},{FLOAT,24},{CHAR,24},{DOUBLE,24},}},
		{args_, {{COMA,25},{RPAR,26},}},
		{arg, {{INT,27},{FLOAT,27},{CHAR,27},{DOUBLE,27},}},
		{decl_local, {{INT,30},{FLOAT,30},{CHAR,30},{DOUBLE,30},}},
		{sentencias, {{ID,33},{IF,33},{WHILE,33},{DO,33},{RETURN,33},{BREAK,33},{PRINT,33},{SCAN,33},}},
		{sentencias_, {{ID,34},{RKEY,35},{IF,34},{WHILE,34},{DO,34},{RETURN,34},{BREAK,34},{PRINT,34},{SCAN,34},}},
		{sentencia, {{ID,39},{IF,36},{WHILE,37},{DO,38},{RETURN,41},{BREAK,40},{PRINT,42},{SCAN,43},}},
		{sent_while, {{WHILE,47},}},
		{sent_asig, {{ID,49},}},
		{sent_break, {{BREAK,57},}},
		{sent_scan, {{SCAN,56},}},
		{sent_do, {{DO,48},}},
		{sent_if_, {{ID,46},{RKEY,46},{IF,46},{ELSE,45},{WHILE,46},{DO,46},{RETURN,46},{BREAK,46},{PRINT,46},{SCAN,46},}},
		{sent_if, {{IF,44},}},
		{sent_return, {{RETURN,58},}},
		{sent_print, {{PRINT,53},}},
		{sent_return_, {{ID,59},{NUMERO,59},{PYC,60},{NOT,59},{LPAR,59},}},
		{sent_print_, {{ID,54},{NUMERO,54},{CADENA,55},{NOT,54},{LPAR,54},}},
		{parte_izq, {{ID,50},}},
		{parte_izq_, {{PUNTO,51},{ASIG,52},}},
		{exp, {{ID,61},{NUMERO,61},{NOT,61},{LPAR,61},}},
		{exp_, {{PYC,63},{COMA,63},{OR,62},{RPAR,63},}},
		{exp_and, {{ID,64},{NUMERO,64},{NOT,64},{LPAR,64},}},
		{exp_and_, {{PYC,66},{COMA,66},{OR,66},{AND,65},{RPAR,66},}},
		{exp_rel, {{ID,67},{NUMERO,67},{NOT,67},{LPAR,67},}},
		{exp_rel_, {{PYC,70},{COMA,70},{OR,70},{AND,70},{EQUAL,68},{DIFF,69},{RPAR,70},}},
		{exp_rel1, {{ID,71},{NUMERO,71},{NOT,71},{LPAR,71},}},
		{exp_rel1_, {{PYC,76},{COMA,76},{OR,76},{AND,76},{EQUAL,76},{DIFF,76},{LT,72},{GT,74},{LTE,73},{GTE,75},{RPAR,76},}},
		{exp_mas, {{ID,77},{NUMERO,77},{NOT,77},{LPAR,77},}},
		{exp_mas_, {{PYC,80},{COMA,80},{OR,80},{AND,80},{EQUAL,80},{DIFF,80},{LT,80},{GT,80},{LTE,80},{GTE,80},{ADD,78},{SUB,79},{RPAR,80},}},
		{exp_mul, {{ID,81},{NUMERO,81},{NOT,81},{LPAR,81},}},
		{exp_mul_, {{PYC,85},{COMA,85},{OR,85},{AND,85},{EQUAL,85},{DIFF,85},{LT,85},{GT,85},{LTE,85},{GTE,85},{ADD,85},{SUB,85},{MUL,82},{DIV,83},{MOD,84},{RPAR,85},}},
		{exp_not, {{ID,87},{NUMERO,87},{NOT,86},{LPAR,87},}},
		{exp_par, {{ID,88},{NUMERO,90},{LPAR,89},}},
		{exp_par_, {{PYC,93},{COMA,93},{PUNTO,92},{OR,93},{AND,93},{EQUAL,93},{DIFF,93},{LT,93},{GT,93},{LTE,93},{GTE,93},{ADD,93},{SUB,93},{MUL,93},{DIV,93},{MOD,93},{LPAR,91},{RPAR,93},}},
		{lista_params, {{ID,94},{NUMERO,94},{NOT,94},{LPAR,94},{RPAR,95},}},
		{params, {{ID,96},{NUMERO,96},{NOT,96},{LPAR,96},}},
		{params_, {{COMA,97},{RPAR,98},}},
		{param, {{ID,99},{NUMERO,99},{NOT,99},{LPAR,99},}},
		{programa, {{INT,0},{FLOAT,0},{CHAR,0},{DOUBLE,0},{VOID,0},{STRUCT,0},}},
	};

};
