library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;

entity corri is
Port ( reloj : in std_logic;
		 M: in std_logic;
		 AN : out std_logic_vector (3 downto 0);
		 LE : out std_logic_vector (6 downto 0);
		 display1, display2, display3, display4: buffer std_logic_vector (6 downto 0));
		 
end corri;

architecture behavioral of corri is
	signal segundo : std_logic;
	signal Q : std_logic_vector(3 downto 0):="0000";
	
	component MuxDec4disp is
		Port ( CLK : in std_logic;
		 D0 : in std_logic_vector (6 downto 0);
		 D1 : in std_logic_vector (6 downto 0);
		 D2 : in std_logic_vector (6 downto 0);
		 D3 : in std_logic_vector (6 downto 0);
		 A : out std_logic_vector (3 downto 0);
		 L : out std_logic_vector (6 downto 0));
	end component;
		
	begin
		MuxDec4 : MuxDec4disp port map (CLK => reloj,
		D0 => display1,
		D1 => display2,
		D2 => display3,
		D3 => display4,
		A => AN,
		L => LE
		);
		
		divisor : process (reloj)
			variable CUENTA: STD_LOGIC_VECTOR(27 downto 0) := X"0000000";
		begin
			if rising_edge (reloj) then
				if CUENTA = X"48009E0" then
					CUENTA := X"0000000";
				else
					CUENTA := CUENTA +1;
				end if;
			end if;
			segundo <= CUENTA(22);
		end process;
		
		contador : process (segundo)
		begin
			if rising_edge (segundo) then
				Q <= Q+1;
			end if;
		end process;
		
		
		Mensaje : Process (Q,M)
        begin

        if M = '1' then

            case Q is 
                when "0000" => display1 <= "0110000"; --3
                when "0001" => display1 <= "1111001"; --1
                when "0010" => display1 <= "0000010"; --6
                when "0011" => display1 <= "1000000"; --0
                when "0100" => display1 <= "0110000"; --3
                when "0101" => display1 <= "1111001"; --1
                when "0110" => display1 <= "1111001"; --1
                when "0111" => display1 <= "0100100"; --2
                when "1000" => display1 <= "1111000"; --7
                when others => display1 <= "1111111"; --apagado
            end case;

        elsif M = '0' then

            case Q is 
                when "0000" => display1 <= "0110000"; --3
                when "0001" => display1 <= "1111001"; --1
                when "0010" => display1 <= "0000010"; --6
                when "0011" => display1 <= "1111001"; --1
                when "0100" => display1 <= "0000010"; --6
                when "0101" => display1 <= "0110000"; --3
                when "0110" => display1 <= "0010000"; --9
                when "0111" => display1 <= "1111001"; --1
                when "1000" => display1 <= "0011001"; --4
                when others => display1 <= "1111111"; -- apagado
            end case;

				else
				display1 <= "1111111";
            end if;
        end process;
		
							
		FF1 : process (segundo)
		begin
			if rising_edge (segundo) then
				display2 <= display1;
			end if;
		end process;
		
		FF2 : process (segundo)
		begin
			if rising_edge (segundo) then
				display3 <= display2;
			end if;
		end process;
		
		FF3 : process (segundo)
		begin
			if rising_edge (segundo) then
				display4 <= display3;
			end if;
		end process;
		
		
		
end Behavioral; 
		